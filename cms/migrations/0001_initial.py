# Generated by Django 4.1.2 on 2022-11-07 13:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mdeditor.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('supplement_content', mdeditor.fields.MDTextField(blank=True, verbose_name='補足コンテンツ')),
                ('publicity', models.IntegerField(default=0, verbose_name='公開状態')),
                ('copied_from', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copy_notes', to='cms.note', verbose_name='コピー元ノート')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[^=<>~!\\\\\\*\\+\\.\\?\\{\\}\\(\\)\\[\\]\\^\\$\\|\\/]+$', '使用できない文字が含まれています。'), django.core.validators.RegexValidator('^\\S', '空白文字で開始できません。'), django.core.validators.RegexValidator('\\S$', '空白文字で終了できません。')], verbose_name='タグ名')),
                ('star', models.IntegerField(default=0, verbose_name='星')),
                ('publicity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='公開状態')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_tags', to='cms.tag', verbose_name='親タグ')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザ')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[^=<>~!\\\\\\*\\+\\.\\?\\{\\}\\(\\)\\[\\]\\^\\$\\|\\/]+$', '使用できない文字が含まれています。'), django.core.validators.RegexValidator('^\\S', '空白文字で開始できません。'), django.core.validators.RegexValidator('\\S$', '空白文字で終了できません。')], verbose_name='プロジェクト名')),
                ('status', models.IntegerField(default=0, verbose_name='状態')),
                ('star', models.IntegerField(default=0, verbose_name='星')),
                ('description', mdeditor.fields.MDTextField(blank=True, verbose_name='説明')),
                ('publicity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='公開状態')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_projects', to='cms.project', verbose_name='親プロジェクト')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザ')),
            ],
        ),
        migrations.CreateModel(
            name='NoteField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_in_note', models.IntegerField(default=0, verbose_name='ノート内順序')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator('^[^=<>~!\\\\\\*\\+\\.\\?\\{\\}\\(\\)\\[\\]\\^\\$\\|\\/]+$', '使用できない文字が含まれています。'), django.core.validators.RegexValidator('^\\S', '空白文字で開始できません。'), django.core.validators.RegexValidator('\\S$', '空白文字で終了できません。')], verbose_name='フィールド名')),
                ('content', mdeditor.fields.MDTextField(verbose_name='フィールドコンテンツ')),
                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='note_fields', to='cms.note', verbose_name='ノート')),
            ],
        ),
        migrations.AddField(
            model_name='note',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cms.project', verbose_name='プロジェクト'),
        ),
        migrations.AddField(
            model_name='note',
            name='tags',
            field=models.ManyToManyField(related_name='notes', to='cms.tag', verbose_name='タグ'),
        ),
        migrations.AddField(
            model_name='note',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_notes', to=settings.AUTH_USER_MODEL, verbose_name='作成者'),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_in_note', models.IntegerField(default=0, verbose_name='ノート内順序')),
                ('is_work', models.BooleanField(default=False, verbose_name='作業か')),
                ('status', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='状態')),
                ('ul_review_interval', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(36500)], verbose_name='上限復習間隔')),
                ('ingestion_level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(7)], verbose_name='摂取レベル')),
                ('absorption_level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)], verbose_name='定着レベル')),
                ('interval_increase_rate', models.FloatField(default=2.5, validators=[django.core.validators.MinValueValidator(1.1), django.core.validators.MaxValueValidator(4.0)], verbose_name='間隔増加率')),
                ('actual_review_interval', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(36500)], verbose_name='実際復習間隔')),
                ('last_reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='最終復習日時')),
                ('importance', models.PositiveSmallIntegerField(default=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='重要度')),
                ('estimated_time', models.PositiveIntegerField(default=60, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(86400)], verbose_name='予想所要時間')),
                ('highest_absorption_level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(12)], verbose_name='最高定着レベル')),
                ('last_updated_at', models.DateTimeField(auto_now=True, verbose_name='最終更新日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='カード作成日時')),
                ('answer_field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answer_cards', to='cms.notefield', verbose_name='解答フィールド')),
                ('dependency_cards', models.ManyToManyField(blank=True, related_name='dependent_cards', to='cms.card', verbose_name='依存先カード')),
                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='cms.note', verbose_name='ノート')),
                ('problem_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_cards', to='cms.notefield', verbose_name='問題フィールド')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザ')),
            ],
        ),
    ]
